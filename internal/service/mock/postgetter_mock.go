// Code generated by MockGen. DO NOT EDIT.
// Source: E:\VSCodeFile/testovoeOzon/PostCommentService/internal/service/comment_service.go
//
// Generated by this command:
//
//	mockgen -source=E:\VSCodeFile/testovoeOzon/PostCommentService/internal/service/comment_service.go -destination=E:\VSCodeFile/testovoeOzon/PostCommentService/internal/service/mock/postgetter_mock.go -package=mock service PostGetter
//

// Package mock is a generated GoMock package.
package mock

import (
	model "postcommentservice/graph/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPostGetter is a mock of PostGetter interface.
type MockPostGetter struct {
	ctrl     *gomock.Controller
	recorder *MockPostGetterMockRecorder
}

// MockPostGetterMockRecorder is the mock recorder for MockPostGetter.
type MockPostGetterMockRecorder struct {
	mock *MockPostGetter
}

// NewMockPostGetter creates a new mock instance.
func NewMockPostGetter(ctrl *gomock.Controller) *MockPostGetter {
	mock := &MockPostGetter{ctrl: ctrl}
	mock.recorder = &MockPostGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostGetter) EXPECT() *MockPostGetterMockRecorder {
	return m.recorder
}

// GetPostById mocks base method.
func (m *MockPostGetter) GetPostById(id int) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", id)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockPostGetterMockRecorder) GetPostById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockPostGetter)(nil).GetPostById), id)
}
