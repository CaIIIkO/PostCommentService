package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"postcommentservice/graph/model"
	constant "postcommentservice/internal/consts"
)

// CreateComment is the resolver for the CreateComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.InputComment) (*model.Comment, error) {
	newComment, err := r.CommentsService.CreateComment(input.FromInput())
	if err != nil {
		return nil, err
	}

	if err := r.SubscriptionService.NotifySubscription(newComment.Post, newComment); err != nil {
		if err.Error() != constant.ThereIsNoSubscriptionError {
			return nil, err
		}
	}

	return &newComment, nil
}

// CreatePost is the resolver for the CreatePost field.
func (r *mutationResolver) CreatePost(ctx context.Context, post model.InputPost) (*model.Post, error) {
	newPost, err := r.PostsService.CreatePost(post.FromInput())
	if err != nil {
		return nil, err
	}

	return &newPost, nil
}

// GetAllPosts is the resolver for the GetAllPosts field.
func (r *queryResolver) GetAllPosts(ctx context.Context, page *int, pageSize *int) ([]*model.Post, error) {
	posts, err := r.PostsService.GetAllPosts(page, pageSize)
	if err != nil {
		return nil, err
	}

	return posts, nil
}

// GetPostByID is the resolver for the GetPostById field.
func (r *queryResolver) GetPostByID(ctx context.Context, id int) (*model.Post, error) {
	post, err := r.PostsService.GetPostById(id)
	if err != nil {
		return nil, err
	}

	return &post, nil
}

// GetCommentsByPost is the resolver for the GetCommentsByPost field.
func (r *queryResolver) GetCommentsByPost(ctx context.Context, id int, page *int, pageSize *int) ([]*model.Comment, error) {
	comments, err := r.CommentsService.GetCommentsByPost(id, page, pageSize)
	if err != nil {
		return nil, err
	}

	return comments, nil
}

// GetRepliesOfComment is the resolver for the GetRepliesOfComment field.
func (r *queryResolver) GetRepliesOfComment(ctx context.Context, id int) ([]*model.Comment, error) {
	comments, err := r.CommentsService.GetRepliesOfComment(id)
	if err != nil {
		return nil, err
	}

	return comments, nil
}

// CommentsSubscription is the resolver for the CommentsSubscription field.
func (r *subscriptionResolver) CommentsSubscription(ctx context.Context, postID int) (<-chan *model.Comment, error) {
	id, ch, err := r.SubscriptionService.CreateSubscription(postID)

	if err != nil {
		return nil, err
	}

	go func() {
		<-ctx.Done()
		err := r.SubscriptionService.DeleteSubscription(id, postID)
		if err != nil {
			// TODO: error log
		}
		close(ch)
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
